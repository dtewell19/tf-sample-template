apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: terraform-lambda-template
  title: AWS Lambda Terraform Template
  description: Create a basic AWS Lambda from zip file using Terrafom
  tags:
    - recommended
    - terraform
    - aws
    - lambda
    - serverless
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - function_name
        - description
        - handler
        - runtime
        - owner
      properties:
        function_name:
          title: Name
          type: string
          description: Unique name of the lambda
        description:
          title: Description
          type: string
          description: Help others understand what this lambda is for.
        handler:
          title: Python Handler
          type: string
          description: "Python handler name. (Ex: index.py)"
        runtime:
          title: Runtime
          type: string
          description: "Runtime to be used. (Default: python3.8)"
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          function_name: ${{ parameters.function_name }}
          description: ${{ parameters.description }}
          handler: ${{ parameters.handler }}
          runtime: ${{ parameters.runtime }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    remoteUrl: ${{ steps.publish.output.remoteUrl }}
    entityRef: ${{ steps.register.output.entityRef }}